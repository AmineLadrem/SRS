#include <stdio.h>
#include <string.h>
#include "sdkconfig.h"
#include "esp_log.h"
#include "freertos/FreeRTOS.h"
#include "freertos/task.h"
#include "freertos/semphr.h"
#include "driver/gpio.h"
#include "rom/gpio.h"

#include "esp_adc/adc_continuous.h"
#include "esp_adc/adc_oneshot.h"
#include "hal/adc_types.h"
#include "esp_adc/adc_cali.h"

#define GPIO_OUTPUT_PIN 7

void app_main(void)
{
    //esp_err_t ret;
    int adc_read0, mv_output;
    
    // Configure GPIO 7 as output
    gpio_pad_select_gpio(GPIO_OUTPUT_PIN);
    gpio_set_direction(GPIO_OUTPUT_PIN, GPIO_MODE_OUTPUT);

    adc_oneshot_unit_handle_t handle = NULL;
    adc_oneshot_unit_init_cfg_t init_config1 = {
        .unit_id = ADC_UNIT_1,
        .ulp_mode = ADC_ULP_MODE_DISABLE,
    };

    ESP_ERROR_CHECK(adc_oneshot_new_unit(&init_config1, &handle));

    adc_oneshot_chan_cfg_t config = {
        .bitwidth = ADC_BITWIDTH_DEFAULT,
        .atten = ADC_ATTEN_DB_11,
    };

    ESP_ERROR_CHECK(adc_oneshot_config_channel(handle, ADC_CHANNEL_3, &config));

    adc_cali_handle_t cali_handle = NULL; 
    adc_cali_curve_fitting_config_t cali_config = {
        .unit_id = ADC_UNIT_1,
        .atten = ADC_ATTEN_DB_11,
        .bitwidth = ADC_BITWIDTH_DEFAULT,
    };

    ESP_ERROR_CHECK(adc_cali_create_scheme_curve_fitting(&cali_config, &cali_handle));

    while(1)
    {
        // Set GPIO 7 high for 5 seconds and perform ADC reading
        gpio_set_level(GPIO_OUTPUT_PIN, 1);
        printf("GPIO 7 set to HIGH\n");

        for (int i = 0; i < 500; i=i+100) {  // 5 seconds in 100ms steps
            ESP_ERROR_CHECK(adc_oneshot_read(handle, ADC_CHANNEL_3, &adc_read0));
            printf("Adc channel-3 raw read result %d \n", adc_read0);
            adc_cali_raw_to_voltage(cali_handle, adc_read0, &mv_output);
            printf("ADC millivolt output %d \n", mv_output*3);
            vTaskDelay(pdMS_TO_TICKS(1000));
        }

        gpio_set_level(GPIO_OUTPUT_PIN, 0);
        printf("GPIO 7 set to LOW\n");

        for (int i = 0; i < 500; i=i+100) {  // 5 seconds in 100ms steps
            ESP_ERROR_CHECK(adc_oneshot_read(handle, ADC_CHANNEL_3, &adc_read0));
            printf("Adc channel-3 raw read result %d \n", adc_read0);
            adc_cali_raw_to_voltage(cali_handle, adc_read0, &mv_output);
            printf("ADC millivolt output %d \n", mv_output*3);
            vTaskDelay(pdMS_TO_TICKS(1000));
        }
    }
}
